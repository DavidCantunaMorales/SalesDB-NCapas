@model NSalesMVCPLS.Models.RegisterViewModel

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Registro</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #f0f2f5;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .register-container {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

            .register-container h2 {
                text-align: center;
                margin-bottom: 30px;
                color: #1d3557;
            }

        .form-group {
            margin-bottom: 20px;
        }

        .btn-primary {
            width: 100%;
            padding: 10px;
            background-color: #1d3557;
            border: none;
            transition: background-color 0.3s ease;
        }

            .btn-primary:hover {
                background-color: #457b9d;
            }

        .btn-secondary {
            width: 100%;
            padding: 10px;
            margin-top: 10px;
        }

        .alert-danger {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #f5c6cb;
            background-color: #f8d7da;
            color: #721c24;
            border-radius: 5px;
        }

        .login-link {
            margin-top: 20px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="register-container">
        <h2>Registro</h2>

        @if (ViewData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                @ViewData["ErrorMessage"]
            </div>
        }

        @using (Html.BeginForm("Index", "Register", FormMethod.Post, new { id = "register-form" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.LabelFor(model => model.Username, "Nombre de Usuario")
                @Html.TextBoxFor(model => model.Username, new { @class = "form-control", placeholder = "Ingrese su usuario" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, "Correo Electrónico")
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = "Ingrese su correo" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, "Contraseña")
                @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Ingrese su contraseña", id = "Password" })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>

            <button type="submit" class="btn btn-primary">Registrarse</button>
            <a href="@Url.Action("Index", "Login")" class="btn btn-secondary">Cancelar</a>
        }

        <div class="login-link">
            <p>¿Ya tienes una cuenta? <a href="@Url.Action("Index", "Login")">Iniciar sesión</a></p>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            document.getElementById('register-form').addEventListener('submit', function(event) {
                var password = document.getElementById('Password').value;
                var passwordRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!#$%^&*(),.?":{}|<>]).*$/;

                if (!passwordRegex.test(password)) {
                    event.preventDefault(); // Evita el envío del formulario
                    alert('La contraseña debe contener al menos una letra mayúscula, una minúscula, un número y un carácter especial.');
                }
            });
        });
    </script>
</body>
</html>
